import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import java.nio.charset.StandardCharsets
import java.nio.file.Files

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

minecraft {
    mappings channel: 'official', version: '1.16.5'
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

group = 'me.ordalca.combocommands'
version = '1.0.2'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://repo.lucko.me/' }
    maven { url = "https://repo.aikar.co/content/groups/aikar/" }
    maven { url = "https://jitpack.io" }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
    ivy {
        setUrl('https://download.nodecdn.net/containers/reforged/server/release')
        metadataSources {
            artifact()
        }
        patternLayout {
            artifact('[revision]/[artifact].[ext]')
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'

    implementation fg.deobf('pixelmon:Pixelmon-1.16.5-9.1.8-server:9.1.8')

    // Any other dependencies go here
    // To shade them do `shadow` rather than `implementation`
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveName = rootProject.name + '-Forge.jar'
    dependsOn('reobfJar')

    // Where you relocate any shaded dependencies

    exclude 'net.minecraft'
    exclude "**/module-info.class"
}

reobf {
    shadowJar {}
}

task versionedRelease(type: Copy) { // This creates a jar with a version number appended to the end in the `release` directory (for ease of use)
    delete fileTree('release/') {
        include '**/*.jar'
    }
    group "build"
    from('./build/libs/' + rootProject.name + '-Forge.jar')
    into('release/')
    include '*.jar'
    rename { String filename ->
        filename.replace(".jar", "-${project.version}.jar")
    }
}

jar.finalizedBy('reobfJar')
build.finalizedBy('versionedRelease')

var mc_version = "1.16.5"

project.ext.lwjglVersion = "3.3.0"
if (mc_version.contains("1.19")) {
    project.ext.lwjglVersion = "3.3.1"
}
project.ext.lwjglNatives = "natives-macos-arm64"

configurations.all {
    resolutionStrategy {
        force "org.lwjgl:lwjgl:${lwjglVersion}"
        force "org.lwjgl:lwjgl-openal:${lwjglVersion}"
        force "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
        force "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
        force "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
        force "org.lwjgl:lwjgl-stb:${lwjglVersion}"
        force "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}"
    }
}

String path = "caches/forge_gradle/mcp_repo/net/minecraft/client/${mc_version}/client-${mc_version}.pom"
File cache = new File(project.getGradle().getGradleUserHomeDir(), path)
println "Swapping in updated LWJGL"

if (cache.exists()) {
    List<String> lines = Files.readAllLines(cache.toPath(), StandardCharsets.UTF_8);

    FileWriter writer = new FileWriter(cache);

    for (String line : lines) {
        if (!line.contains("arm")) {
            line = line.replaceAll("natives-macos", "natives-macos-arm64") + "\n"
        }
        writer.append(line)
    }
    writer.close();
}